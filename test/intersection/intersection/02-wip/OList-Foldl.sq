data OList a <p :: Int -> a -> Bool> where
  Nil :: OList a <p>
  Cons :: x: {a | p 0 _v} -> xs: OList a <{p (_0 + 1) _1}> -> OList a <p>

termination measure len :: OList a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

type List a = OList a <{True}>

{-
The OList maintains an ordering on the list in the predicate.
So, a left fold over such a list counting elements seen will produce a number
that is exactly the length of the list. The count will also map to each
element's ordinal position in the OList. This construction should give us
information enough to specify the DIRECTION of a fold.
-}
foldl :: <p :: Int -> a -> Bool> .
  (xs: OList a <p> -> f: (b -> a -> b) -> b -> b) ^
  (xs: List a -> f: (acc:Int -> x:a -> {Int | _v == acc && p _v x}) -> seed:{Int|_v == len xs} -> {Int | _v == len xs})
foldl = \xs. \f. \seed.
  match xs with
    Nil -> seed
    -- Cons y ys -> foldl ys f (f seed y) -- foldl
    Cons y ys -> f (foldl ys f seed) y -- foldr