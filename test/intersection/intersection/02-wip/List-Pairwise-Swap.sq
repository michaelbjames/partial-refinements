data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

{-
Definitely not strong enough to synthesize. Nor can it check.
-}
list_pairwise_swap :: (List Int -> List Int) ^
  ({List Int | len _v == 0} -> {List Int | len _v == 0})
list_pairwise_swap = \xs.
  match xs with
    Nil -> Nil
    Cons y1 ys ->
      match ys with
        Nil -> Nil
        Cons y2 yys ->
          match (list_pairwise_swap ys) with
            Nil -> Cons y2 (Cons y1 (list_pairwise_swap yys))
            Cons y3 yyys -> list_pairwise_swap yys
