data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

shape_test ::
	(xs: List a -> List a) ^
    (xs: List Int -> List Int)
shape_test = \xs.
	match xs with
		Nil -> Nil
		Cons y ys -> shape_test ys
