data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

{-
Note that two of the specs are identical but one is the polymorphic version of the other.
This will not work because of the polymorphic spec mixed with concrete one.
-}
snoc ::
		(xs: List a -> x: a ->  {List a | len _v == (len xs + 1)}) ^
		(xs: {List a | _v == Nil} -> x: a ->  {List a | _v == (Cons x Nil)}) ^
		(xs: {List Int| _v == (Cons 2 Nil)} -> x: {Int | _v == 1} -> {List Int | _v == (Cons 2 (Cons 1 Nil))}) ^
		(xs: {List Int| _v == (Cons 3 (Cons 2 Nil))} -> x: {Int | _v == 1} -> {List Int | _v == (Cons 3 (Cons 2 (Cons 1 Nil)))}) ^
		(xs: {List Int| _v == (Nil)} -> x: {Int | _v == 1} -> {List Int | _v == (Cons 1 Nil)})
-- snoc = \xs. \x.
-- 	match xs with
-- 		Nil -> ??
-- 		Cons y ys -> ??
snoc = \xs. \x.
	match xs with
		Nil -> Cons x Nil
		Cons y ys -> Cons y (snoc ys x)


