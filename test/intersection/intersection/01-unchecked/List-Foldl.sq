data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs


{-
Unlike OList-Foldl, which used an abstract refinement on a list, we use a
simpler property. Subtraction is order dependent should force a fold in a
certain direction over a list.
This spec contains a trace-complete set of 3 examples to show that:
foldl (-) 3 [2,1] = ((-) ((-) 3 2) 1) = 0
It cannot check, the error manifests as a shape mismatch on the recursive call.
We believe this is related to a HOF auxilliary goal.
-}

foldl :: -- (xs:List a -> base:b -> f:(x:a -> acc:b -> b) -> b) ^
          (xs: List Int ->
            base:Int ->
            f:(acc:Int -> y:Int -> {Int | _v == (acc - y)}) ->  -- f does subtraction
            {Int | ((base == 3 && xs == (Cons 2 (Cons 1 Nil))) ==> (_v == 0)) &&
                   ((base == 1 && xs == (Cons 1 Nil))          ==> (_v == 0)) &&
                   ((base == 0 && xs == Nil)                   ==> (_v == 0))}) -- concrete, trace-complete examples
foldl = \xs. \base. \f.
  match xs with
    Nil -> base
    Cons y ys -> foldl ys (f base y) f
