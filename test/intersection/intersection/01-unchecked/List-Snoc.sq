type Nat = {Int | _v >= 0}

data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

{-
Does not check.
-}
snoc ::
		(xs: {List a | _v == Nil} -> x: a ->  {List a | _v == (Cons x Nil)}) ^
		(xs: List a -> x: a ->  {List a | len _v == (len xs + 1)}) ^
		(xs: {List Int| _v == (Cons 2 Nil)} -> x: {Int | _v == 1} -> {List Int |
			_v == (Cons 2 (Cons 1 Nil))})
snoc = \zs. \z.
	match zs with
		Nil -> Cons z Nil
		Cons y ys -> Cons y (snoc ys z)


