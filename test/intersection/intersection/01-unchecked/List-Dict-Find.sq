data Pair a b where
	Pair :: x: a -> y: b -> Pair a b

measure fst :: Pair a b -> a where
  Pair x y -> x

measure snd :: Pair a b -> b where
  Pair x y -> y


data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

measure insert :: x: a -> List a -> {List a|True} where
  Nil -> Cons x Nil
  Cons y ys -> Cons x (Cons y ys)


{-
Not strong enough
-}
find :: (List (Pair Int Int) -> Int -> Int ->  Int) ^
        ({List (Pair Int Int) | len _v == 0} -> Int -> default: Int -> {Int | _v == default})
find = \haystack. \needle. \def.
  match haystack with
    Nil -> def
    Cons x xs ->
      match x with
        Pair xa xb -> if xa == needle
          then xb
          else find xs needle def