data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

append :: xs: List a -> ys: List a -> {List a | len _v == len xs + len ys}


list_rev_append :: (xs:List Int -> { List Int | len _v == len xs}) ^
  (xs:List a -> List a)
list_rev_append = \xs.
  match xs with
    Nil -> Nil
    Cons z zs -> append (list_rev_append zs) (Cons z Nil)