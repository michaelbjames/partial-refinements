qualifier {len _v >= 0}

data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

type Nat = {Int | _v >= 0}


-- This isn't strong enough to synthesize.
-- It's missing cases for when the input list isn't entire negative or natural.
allNeg :: (xs:{List {Int | _v < 0} | len _v == 0} -> {Bool | _v == True}) ^
          (xs:{List {Int | _v < 0} | len _v > 0} -> {Bool | _v == True}) ^
          (xs:{List Nat | len _v > 0} -> {Bool | _v == False})
allNeg = \xs.
  match xs with
    Nil -> True
    Cons y ys -> if y >= 0
      then False -- Cannot synthesize this expression.
      else allNeg ys

{-
Does not work with MARCO

TYPE ERROR:
from world: xs:{List {Int|_v < 0}|len _v > 0} -> {Bool|_v == True}
with error: Cannot find sufficiently strong refinements
when checking
allNeg :: x11:_ -> {Bool|_v == True}
in
\xs .
  match xs with
    Cons y ys ->
      if y >= 0
        then False
        else allNeg ??

allNeg :: {List {Int|U8}|U9} -> {Bool|[xs -> x12]U10}
want: U8: _v < 0
      U9: len _v >= 0
      U10: _v == True
      C4: True
      C5: True
      C6: False

(xs:{List {Int|_v < 0}|len _v == 0} -> {Bool|_v == True}) ^ ((xs:{List {Int|_v < 0}|len _v > 0} -> {Bool|_v == True}) ^ (xs:{List {Int|_v >= 0}|len _v > 0} -> {Bool|_v == False})) <: xs:{List {Int|U8}|U9} -> {Bool|U10}
Breaks down:


1/2/3
{List {Int|U8}|U9} <: ({List {Int|_v < 0}|len _v == 0}) \/ (({List {Int|_v < 0}|len _v > 0}) \/ ({List {Int|_v >= 0}|len _v > 0}))
C4 && (C5 && C6) ==> False [NOPE]

1/3
{List {Int|U8}|U9} <: ({List {Int|_v < 0}|len _v == 0}) \/ ({List {Int|_v >= 0}|len _v > 0}) (instantiate-isect-LHS+arg-world-union-1,3)
C4 && (C6 && !C5) ==> False

2/3
{List {Int|U8}|U9} <: ({List {Int|_v < 0}|len _v > 0}) \/ ({List {Int|_v >= 0}|len _v > 0}) (instantiate-isect-LHS+arg-world-union-2,3)
C5 && (C6 && !C4) ==> False

1/2
{List|U9} <: {List|len _v == 0 || len _v > 0} (instantiate-isect-LHS+arg-world-union-1,2+pushed-into-refinement)
should i have: C4 && C5 ==> !C6?
C4 && C5 ==> (!C6 && !C7) == !C4 OR !C5 OR !C6
C4 && C5 && !C6 ==> true === !C4 OR !C5

-}