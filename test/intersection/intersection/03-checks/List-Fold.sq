data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

-- This spec checks, but is not strong enough to specify the _direction_ of the fold.
fold :: (f: (b -> a -> b) -> b -> List a -> b) ^
  (f: (acc:b -> a -> {b|_v == acc}) -> seed: b -> List a -> {b | _v == seed}) ^
  (f: (acc:Int -> a -> {Int | _v == acc + 1}) -> seed: {Int | _v == 0} -> xs: List a -> {Int | _v == len xs})
fold = \f. \seed. \xs.
  match xs with
    Nil -> seed
    Cons y ys -> fold f (f seed y) ys