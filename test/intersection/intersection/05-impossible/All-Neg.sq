data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

type Nat = {Int | _v >= 0}


-- This isn't strong enough to synthesize.
-- It's missing cases for when the input list isn't entire negative or natural.
allNeg :: (xs:List {Int | _v < 0} -> {Bool | _v == True}) ^
          (xs:{List Nat | len _v > 0} -> {Bool | _v == False})
allNeg = \xs.
  match xs with
    Nil -> True
    Cons y ys -> if y >= 0
      then False -- Cannot synthesize this expression.
      else allNeg ys

{-
This works with EitherOr, but not algorithmiclaurent (or any complex one)

-- first call (assumed xs is [Neg]).
  The if-true case cannot happen
  allNeg :: List {Int|_v < 0} -> True

-- second call (assumed xs is non-empty [Nat]),
  The if-false case cannot happen, so it can use the 1st defn
  allNeg :: List {Int|_v < 0} -> False
-}