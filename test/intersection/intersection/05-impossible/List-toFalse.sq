data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs


-- listToFalse :: (xs:List Int -> Bool) ^
    -- (xs:{List Int | _v == Nil} -> {Bool | _v == False}) ^
    -- (xs:{List Int | _v == Cons 1 Nil || _v == Cons 2 (Cons 1 Nil)} -> {Bool | _v == False})

listToFalse :: (xs:{List a | len _v == 0} -> {Bool| _v == False}) ^
    (xs:{List a | len _v > 0} -> {Bool | _v == False})
listToFalse = \xs.
    match xs with
        Nil -> False
        Cons y ys -> listToFalse ys