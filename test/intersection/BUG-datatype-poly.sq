data List a where
    Nil :: List a
    Cons :: a -> prev:List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
    Nil -> 0
    Cons x xs -> 1 + len xs

append :: xs: List Int -> ys: List Int -> {List Int | len _v == len xs + len ys}

toZero :: n:List Int -> {List Int |
    ((n == Nil) ==> (_v == Nil)) &&
    ((n == Cons 1 Nil) ==> (_v == Cons 1 Nil)) && -- Comment this out and it checks.
    True
    }
toZero = \n.
    match n with
        Nil -> append Nil Nil
        Cons z prev -> Cons z (toZero prev)
