data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

true :: {Bool | _v}
false :: {Bool | !_v}

type Nat = {Int | _v >= 0}

-- This has an overlapping intersection, but I think we can give this meaning:
-- The "smallest" argument takes precidence.
allNeg :: ((xs:[Int] -> {Bool | true}) ^ (xs:[Nat] -> {Bool | false}))
allNeg = \xs. match xs of
  Nil -> true
  Cons y ys -> if y >= 0
    then false
    else allNeg ys