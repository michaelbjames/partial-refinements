data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

data Pair a b where
	Pair :: x: a -> y: b -> Pair a b

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

-- data Tuple a b where
--     T :: x: a -> y: b -> Tuple a b

-- sortedPairs :: [a] -> [Pair (a) (a)]
-- sortedPairs = \xs. match xs error

type PrintableAscii = {Int | _v >= 32 && _v < 127}
type NonPrintableAscii = {Int | (_v < 32 && _v >= 0) || _v == 127}

type Upper = {PrintableAscii | _v >= 65 && _v <= 90}
type Lower = {PrintableAscii | _v >= 97 && _v <= 122}

toLower :: (Upper -> Lower) ^ (Int -> Int)
-- toLower :: (Upper -> Lower) ^ ((Lower -> Lower) ^ (Int -> Int)) -- three way
-- intersection doesnt work.
toLower = \x. if (x >= 65 && x <= 90)
    then x + 32
    else x