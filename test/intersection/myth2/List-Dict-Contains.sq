data Pair a b where
	Pair :: x: a -> y: b -> Pair a b

measure fst :: Pair a b -> a where
  Pair x y -> x

measure snd :: Pair a b -> b where
  Pair x y -> y


data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

measure insert :: x: a -> List a -> {List a|True} where
  Nil -> Cons x Nil
  Cons y ys -> Cons x (Cons y ys)


-- Not strong enough??
-- contains :: List (Pair a b) -> a -> Bool
contains :: (a -> {List (Pair a Int) | len _v == 0} -> {Bool | _v == False}) ^
            (x: a -> {List (Pair a Int) | _v == (Cons (Pair x 0) Nil)} -> {Bool | _v == True}) ^
            (x: a -> {List (Pair {a | _v == x} Int) | len _v > 0} -> {Bool | _v == True}) ^
            (x: a -> {List (Pair {a | _v != x} Int) | len _v > 0} -> {Bool | _v == False})

-- contains :: x: Int -> xs: List (Pair Int Int) -> {Bool |
--     ((x == 0 && xs == (Nil)) ==> (_v == False)) &&
--     ((x == 0 && xs == (Cons (Pair 0 4) Nil)) ==> (_v == True)) &&
--     ((x == 0 && xs == (Cons (Pair 1 5) (Cons (Pair 0 4) Nil))) ==> (_v == True)) &&
--     True
  -- }
contains = \needle. \haystack.
  match haystack with
    Nil -> False
    Cons x xs ->
      match x with
        Pair xa xb -> if xa == needle
          then True
          else contains needle xs