data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

data Tree a where
	Empty :: Tree a
	Node :: x: a -> l: Tree a -> r: Tree a -> Tree a

termination measure size :: Tree a -> {Int | _v >= 0} where
  Empty -> 0
  Node x l r -> size l + size r + 1


measure telems :: Tree a -> Set a where
  Empty -> []
  Node x l r -> telems l + telems r + [x]


type Nat = {Int | _v >= 0}

-- Used in Myth
append :: xs: List a -> ys: List a -> {List a | len _v == len xs + len ys}

-- Escher Extra Components
isLeaf :: t: Tree a -> {Bool | _v == (size t == 1)}

{-
Implication example from Smyth.
Does not check: Z3 encoding bug.
-}
collect_leaves_example :: t: Tree Int -> {List Int |
	((t == Empty) ==> (_v == Nil)) &&
	((t == (Node 1 Empty Empty)) ==> (_v == (Cons 1 Nil))) &&
	((t == (Node 1 (Node 2 Empty Empty) Empty)) ==> (_v == (Cons 2 Nil))) &&
	((t == (Node 1 (Node 2 Empty Empty) (Node 3 Empty Empty))) ==> (_v == (Cons 2 (Cons 3 Nil)))) &&
	True
	}
collect_leaves_example = \t.
	match t with
		Empty -> Nil
		Node x l r -> if (isLeaf t)
			then Cons x Nil
			else append (collect_leaves_example l) (collect_leaves_example r)



{-
Checks; doubltful it would synthesize.
-}
collect_leaves :: (t: Tree Int -> List {Int | _v in telems t}) ^
	(t: {Tree Int| size _v == 1} -> {List Int | len _v == 1})
collect_leaves = \t.
	match t with
		Empty -> Nil
		Node x l r -> if (isLeaf t)
			then Cons x Nil
			else append (collect_leaves l) (collect_leaves r)

