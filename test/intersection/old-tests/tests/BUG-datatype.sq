data Nat b where
    Z :: Nat b
    S :: prev:Nat b -> Nat b


termination measure len :: Nat b -> {Int | _v >= 0} where
    Z -> 0
    S prev -> 1 + len prev

-- toZero :: n:Nat Int -> {Nat Int |
--     ((n == Z) ==> (_v == Z)) &&
--     ((n == S Z) ==> (_v == Z)) && -- Comment this out and it checks.
--     True
--     }
-- toZero = \n.
--     match n with
--         Z -> Z
--         S xs -> toZero xs

-- toZero :: b: Bool -> n:Nat Bool -> {Bool |
--     ((n == Z) ==> (_v == False)) &&
--     ((n == S Z) ==> (_v == False)) && -- Comment this out and it checks.
--     True
--     }
-- toZero = \b. \n.
--     match n with
--         Z -> False
--         S prev -> toZero b prev


-- I believe the function can be simplified
toZero :: n:Nat Bool -> {Bool |
    ((Z == n) ==> (_v == False)) &&
    ((S Z == n) ==> (_v == False)) && -- Comment this out and it checks.
    True
    }
toZero = \n.
    match n with
        Z -> False
        S prev -> toZero prev


-- measure size :: Nat b -> {Int | _v >= 0} where
--     Z -> 0
--     S prev -> 2 + size prev


-- This one tests different parametric instances
-- multiZero :: nb:Nat Bool -> ni:Nat Int -> {Bool |
--   ((ni == Z:Nat Int) && (ni == Z)) ==> (_v == False) &&
--   ((ni == S Z) || (ni == S Z) ==> (_v == False))}
-- multiZero = \nb. \ni.
--     match nb with
--         Z -> False
--         S prev -> toZero prev ni


-------------------------------------------
-- This contains a monomorphic version
-- data Nat_mono where
--     Z_mono :: Nat_mono
--     S_mono :: prev:Nat_mono -> Nat_mono

-- toZeroMono :: n:Nat_mono -> {Bool |
--     ((n == Z_mono) ==> (_v == False)) &&
--     ((n == S_mono Z_mono) ==> (_v == False)) && -- Comment this out and it checks.
--     True
--     }
-- toZeroMono = \n.
--     match n with
--         Z_mono -> False
--         S_mono prev -> toZeroMono prev