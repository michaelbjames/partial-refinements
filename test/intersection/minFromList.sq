data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

measure elems :: List a -> Set a where
  Nil -> []
  Cons x xs -> [x] + elems xs


leq :: x: a -> y: a -> {Bool | _v == (x <= y)}
neq :: x: a -> y: a -> {Bool | _v == (x != y)}

minFromList :: xs:{List Int| len _v > 0} -> {Int | _v in elems xs} -- ^ [-3,2,1] -> -3 ^ [2,1] -> 1 ^ [1] -> 1
minFromList = \xs. match xs of
    Nil -> error
    Cons y ys -> if len ys == 0
        then y
        else if y < (minFromList ys)
            then y
            else minFromList ys