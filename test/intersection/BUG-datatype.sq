data Nat a where
    Z :: Nat a
    S :: prev:Nat a -> Nat a

termination measure len :: Nat a -> {Int | _v >= 0} where
    Z -> 0
    S prev -> 1 + len prev

-- toZero :: n:Nat Int -> {Nat Int |
--     ((n == Z) ==> (_v == Z)) &&
--     ((n == S Z) ==> (_v == Z)) && -- Comment this out and it checks.
--     True
--     }
-- toZero = \n.
--     match n with
--         Z -> Z
--         S xs -> toZero xs

toZero :: b: Bool -> n:Nat Int -> {Int |
    ((n == Z) ==> (_v == 0)) &&
    ((n == S Z) ==> (_v == 0)) && -- Comment this out and it checks.
    True
    }
toZero = \b. \n.
    match n with
        Z -> 0
        S prev -> toZero b prev
