{-
Are there and even number of Trues in a list of Bools?
-}

data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

not :: p:Bool -> {Bool | _v == !p}
true :: {Bool | _v == True}

{-
Does not check.
-}
list_even_parity :: (List Bool -> Bool) ^
  (xs: List {Bool | _v == False} -> {Bool | _v == True}) ^
  (xs: {List {Bool | _v == True}| len _v == 2} -> {Bool | _v == True}) ^
  (xs: {List {Bool | _v == True}| len _v == 3} -> {Bool | _v == False}) ^
  (xs: {List Bool | len _v == 0} -> {Bool | _v == True}) ^
  (xs: {List Bool | _v == (Cons True (Cons False Nil))} -> {Bool | _v == False}) ^
  (xs: {List Bool | _v == (Cons False Nil)} -> {Bool | _v == True})
list_even_parity = \xs.
  match xs with
    Nil -> True
    Cons y ys -> if y
      then not (list_even_parity ys)
      else list_even_parity ys