data Nat where
  Z :: Nat
  S :: Nat -> Nat

termination measure dec :: Nat -> {Int | _v >= 0} where
  Z -> 0
  S m -> 1 + dec m

data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

data Maybe a where
  Nothing :: Maybe a
  Just :: a -> Maybe a


{-
Cannot check: Z3 encoding bug.
-}
list_last_examples :: xs:List Nat -> { Maybe Nat |
   (xs == Nil ==> _v == Nothing) &&
   (xs == (Cons (S Z) Nil) ==> _v == (Just (S Z))) &&
   (xs == (Cons (S (S Z)) Nil) ==> _v == (Just (S (S Z)))) &&
   (xs == (Cons (S (S Z)) (Cons (S Z) Nil)) ==> _v == (Just (S Z))) &&
   (xs == (Cons (S Z) (Cons (S (S Z)) Nil)) ==> _v == (Just (S (S Z)))) &&
   (xs == (Cons (S (S (S Z))) (Cons (S (S Z)) (Cons (S Z) Nil))) ==> _v == (Just (S Z))) &&
   True
}
list_last_examples = \xs .
  match xs with
    Nil -> Nothing
    Cons x3 x4 ->
      match x4 with
        Nil -> Just x3
        Cons x8 x9 -> list_last_examples x4