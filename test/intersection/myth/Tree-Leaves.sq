data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

data Tree a where
	Empty :: Tree a
	Node :: x: a -> l: Tree a -> r: Tree a -> Tree a

termination measure size :: Tree a -> {Int | _v >= 0} where
  Empty -> 0
  Node x l r -> size l + size r + 1

measure telems :: Tree a -> Set a where
  Empty -> []
  Node x l r -> telems l + telems r + [x]

append :: xs: List a -> ys: List a -> {List a | len _v == len xs + len ys}

-- Implication needing recursion seems to fail.
-- leaves :: t: Tree Int -> {List Int |
-- 	((t == Empty) ==> (_v == Nil)) &&
-- 	((t == (Node 1 Empty Empty)) ==> (_v == (Cons 1 Nil))) &&
-- 	((t == (Node 1 (Node 2 Empty Empty) Empty)) ==> (_v == (Cons 2 Nil))) &&
-- 	((t == (Node 1 (Node 2 Empty Empty) (Node 3 Empty Empty))) ==> (_v == (Cons 2 (Cons 3 Nil)))) &&
-- 	True
-- 	}
leaves = \t.
	match t with
		Empty -> Nil
		Node x l r -> if (l == r && r == Empty)
			then Cons x Nil
			else append (leaves l) (leaves r)


-- join??