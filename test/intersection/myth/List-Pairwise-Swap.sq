data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

-- list_pairwise_swap :: xs:NatList -> { NatList |

--    (xs == Nil ==> _v == Nil) &&
-- -- (xs == (Cons Z Nil) ==> _v == Nil) &&
--    (xs == (Cons (S Z) Nil) ==> _v == Nil) &&
-- -- (xs == (Cons Z (Cons (S Z) Nil)) ==> _v == (Cons (S Z) (Cons Z Nil))) &&
--    (xs == (Cons (S Z) (Cons Z Nil)) ==> _v == (Cons Z (Cons (S Z) Nil))) &&
--    (xs == (Cons (S Z) (Cons Z (Cons (S Z) Nil))) ==> _v == Nil) &&
--    (xs == (Cons Z (Cons (S Z) (Cons Z (Cons (S Z) Nil)))) ==> _v == (Cons (S Z) (Cons Z (Cons (S Z) (Cons Z Nil))))) &&
--    True

-- }
-- list_pairwise_swap = ??



-- /var/www/comcom/tmp/Synquid/6535434313496091/Synquid.sq:30: Error:
-- Cannot match shape 'Nat'
-- with shape 'NatList'
-- when checking Z :: NatList in
-- \xs .
-- match Cons Z Z with

-- Error

list_pairwise_swap :: (List Int -> List Int) ^
  ({List Int | len _v == 0} -> {List Int | len _v == 0}) ^
  ({List Int | len _v == 1} -> {List Int | len _v == 0}) ^
  ({List Int | len _v == 2} -> {List Int | len _v == 2}) ^
  ({List Int | len _v == 3} -> {List Int | len _v == 0})
list_pairwise_swap = \xs.
  match xs with
    Nil -> Nil
    Cons y ys ->
      match ys with
        Nil -> Nil
        Cons yy yys ->
          match (list_pairwise_swap ys) with
            Nil -> Cons yy y (list_pairwise_swap yys)
            Cons yyy yyys -> list_pairwise_swap yys



-- xs match {
--   case Nil =>
--     Nil
--   case Cons(head, tail) =>
--     tail match {
--       case Nil =>
--         Nil
--       case Cons(head$1, tail$1) =>
--         val rec: NatList = list_pairwise_swap(tail$1)
--         list_pairwise_swap(tail) match {
--           case Nil =>
--             Cons(head$1, Cons(head, rec))
--           case Cons(head$2, tail$2) =>
--             rec
--         }
--     }
-- }
