data Nat where
  Z :: Nat
  S :: Nat -> Nat

termination measure dec :: Nat -> {Int | _v >= 0} where
  Z -> 0
  S m -> 1 + dec m

data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

map :: f: (a -> b) -> xs: List a -> {List b | len _v == len xs}
map = \f . \xs .
    match xs with
      Nil -> Nil
      Cons x3 x4 -> let f0 = \x9 . f
                                     x9 in
                    Cons (f x3) (map f0 x4)


list_inc :: xs:List Nat -> { List Nat |

   (xs == Nil ==> _v == Nil) &&
   (xs == (Cons (S Z) (Cons (S (S Z)) Nil)) ==> _v == (Cons (S (S Z)) (Cons (S (S (S Z))) Nil))) &&
   (xs == (Cons Z (Cons Z Nil)) ==> _v == (Cons (S Z) (Cons (S Z) Nil))) &&
   (xs == (Cons (S (S (S Z))) (Cons (S (S (S (S Z)))) (Cons (S (S (S (S (S Z))))) Nil))) ==> _v == (Cons (S (S (S (S Z)))) (Cons (S (S (S (S (S Z))))) (Cons (S (S (S (S (S (S Z)))))) Nil)))) &&
   True

}
list_inc = ??

list_inc_2 :: (xs: List Int -> List Int) ^
  (xs:List {Int | _v == 1} -> List {Int | _v == 2}) ^
  (xs:{List Int | len _v == 1} -> {List Int | len _v == 1})
list_inc_2 = \x. map (\y. y + 1) x
