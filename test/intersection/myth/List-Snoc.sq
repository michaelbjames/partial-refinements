type Nat = {Int | _v >= 0}

data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

-- This checks but will not synthesize.
-- snoc ::
-- 		(x: a -> xs: {List a | _v == Nil} -> {List a | _v == (Cons x Nil)}) ^
-- 		(x: a -> xs: List a -> {List a | len _v == (len xs + 1)}) ^
--      (x: a -> )

-- This does not.
-- snoc :: xs: List Int -> x: Int -> {List Int |
-- 	(( xs == Nil) ==> (_v == (Cons x Nil))) &&
-- 	((xs == (Cons 1 Nil)) ==> (_v == (Cons 1 (Cons x Nil))))
-- 	-- ((x == 0 && xs == (Cons 2 (Cons 1 Nil)))==> (_v == (Cons 2 (Cons 1 (Cons 0 Nil)))))
-- 	}

-- snoc :: xs: List Int -> x: Int -> {List Int |
-- 	(((x == 0) && (xs == Nil)) ==> (_v == (Cons 0 Nil))) &&
-- 	(((x == 0) && (xs == (Cons 1 Nil))) ==> (_v == (Cons 1 (Cons 0 Nil)))) &&
-- 	(((x == 0) && (xs == (Cons 2 (Cons 1 Nil)))) ==> (_v == (Cons 2 (Cons 1 (Cons 0 Nil)))))
-- 	}

snoc :: xs: List Int -> x: Int -> {List Int |
	(((xs == Nil)) ==>
		((_v == (Cons 0 Nil)))) &&
	(((xs == (Cons 1 Nil))) ==>
		(_v == (Cons 1 (Cons 0 Nil))))
	}
snoc = \zs. \z.
	match zs with
		Nil -> Cons z Nil
		Cons y ys -> Cons y (snoc ys z)


