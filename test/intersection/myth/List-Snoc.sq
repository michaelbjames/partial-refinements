type Nat = {Int | _v >= 0}

data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

measure elems :: List a -> Set a where
  Nil -> []
  Cons x xs -> [x] + elems xs

-- This works
-- snoc :: (x: a -> xs: List a -> List a) ^
-- 		(x: a -> xs: {List a | _v == Nil} -> {List a | _v == (Cons x Nil)}) ^
-- 		(x: a -> xs: List a -> {List a | len _v == (len xs + 1)})

-- This does not.
snoc :: xs: List Int -> x: Int -> {List Int |
	((x == 0 && xs == Nil) ==> (_v == (Cons 0 Nil))) &&
	((x == 0 && xs == (Cons 1 Nil) )==> (_v == (Cons 1 (Cons 0 Nil)))) &&
	((x == 0 && xs == (Cons 2 (Cons 1 Nil)))==> (_v == (Cons 2 (Cons 1 (Cons 0 Nil))))) &&
	True
	}
snoc = \xs. \x.
	match xs with
		Nil -> Cons x Nil
		Cons y ys -> Cons y (snoc ys x)


