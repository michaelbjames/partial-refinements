data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs


-- qualifier { len _v < len x, len _v >= 0 }

-- Use abstraction in HO argument:
map1 :: (xs: List a -> f: (a -> b -> b) -> y:b -> {List b | len _v == len xs}) ^
        (xs: List Int -> f: (Int -> Int -> Int) -> y:Int ->  List Int)
map1 = ??




