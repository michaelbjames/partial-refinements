{-
Are there and even number of Trues in a list of Bools?
-}

data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

not :: p:Bool -> {Bool | _v == !p}
true :: { Bool | _v }

qualifier { len _v < len x, len _v >= 0 }
qualifier { x }


-- {-
-- Does not check!
-- -}
list_even_parity :: -- (xs:List Bool -> Bool) ^
  (xs: {List {Bool | _v == True}| len _v == 2 || len _v == 0} -> {Bool |
    ((len xs == 0 || len xs == 2) ==> _v == True) &&
    ((len xs == 1 || len xs == 3) ==> _v == False)}) ^
  (xs: {List {Bool | _v == False}| len _v > 0} -> {Bool | _v == True}) ^
  (xs: List Bool -> {Bool |
    (
    -- (xs == Nil ==> (_v == True)) &&
    --  (xs == Cons True Nil ==> _v == False) &&
    --  (xs == Cons False Nil ==> _v == True) &&
     (xs == Cons True (Cons False Nil) ==> _v == False) &&
    --  (xs == Cons True (Cons True Nil) ==> _v == True) &&
     (xs == Cons False (Cons True Nil) ==> _v == False) &&
    --  (xs == Cons False (Cons False Nil) ==> _v == True) &&
     True)})
list_even_parity = \xs.
  match xs with
    Nil -> True
    Cons y ys -> if y
      then not (list_even_parity ys)
      else list_even_parity ys

