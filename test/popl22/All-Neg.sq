qualifier { len _v >= 0, len _v < len x, x == y }

data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

type Nat = {Int | _v >= 0}

false :: {Bool | !_v}
true :: {Bool | _v}
qualifier { x >= 0 }

allNeg :: (xs:List {Int | _v < 0} -> {Bool | _v == True}) ^
          (xs: List Int -> {Bool |
              ((xs == (Cons (-1) (Cons 1 Nil))) ||
              (xs == ((Cons 1 Nil)))) ==> (_v == False)})
allNeg = ?? {- \xs.
  match xs with
    Nil -> True
    Cons y ys -> if y >= 0
      then False -- Cannot synthesize this expression.
      else allNeg ys -}