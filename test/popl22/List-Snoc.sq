data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

qualifier { len _v < len x, len _v >= 0 }

snoc ::
		(xs: List a -> x: a ->  {List a | len _v == (len xs + 1)}) ^
		(xs: List Int -> x: Int -> {List Int | (x == 1 ==>
			(
				((xs == Nil) ==> (_v == Cons 1 Nil)) &&
				((xs == (Cons 3 Nil)) ==> (_v == Cons 3 (Cons 1 Nil))) &&
				((xs == (Cons 2 (Cons 3 Nil))) ==> (_v == Cons 2 (Cons 3 (Cons 1 Nil)))) &&
			True))})
snoc = ?? {- \xs. \x.
	match xs with
		Nil -> Cons x Nil
		Cons y ys -> Cons y (snoc ys x) -}
