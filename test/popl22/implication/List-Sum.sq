type Nat = {Int | _v >= 0}

data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

plus :: x:Int -> y:Int -> {Int | _v == (x + y)}
zero :: {Int | _v == 0}

qualifier {len _v <  len x, len _v >= 0}

-- synthesizes
sum :: xs: List Int -> {Int |
		((xs == Nil) ==> (_v == 0)) &&
		((xs == (Cons 2 Nil)) ==> (_v == 2)) &&
		((xs == (Cons 1 (Cons 2 Nil))) ==> (_v == 3))}
sum = ?? {- \xs.
	match xs with
		Nil -> 0
		Cons y ys -> y + sum ys-}


