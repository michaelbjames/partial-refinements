data Pair a b where
	Pair :: x: a -> y: b -> Pair a b

measure fst :: Pair a b -> a where
  Pair x y -> x

measure snd :: Pair a b -> b where
  Pair x y -> y


data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

qualifier { len _v < len x, len _v >= 0, x == y }

false :: {Bool | _v == False}
true :: {Bool | _v == True}


contains :: xs: List (Pair Int Int) -> needle: Int -> {Bool |
    ((xs == (Nil) && needle == 0) ==> (_v == False)) &&
    ((xs == (Cons (Pair 0 2) Nil) && needle == 0) ==> (_v == True)) &&
    ((xs == (Cons (Pair 1 2) Nil) && needle == 0) ==> (_v == False)) &&
    ((xs == (Cons (Pair 1 2) (Cons (Pair 0 2) Nil)) && needle == 0) ==> (_v == True))
  }
contains = ?? {- \haystack. \needle.
  match haystack with
    Nil -> False
    Cons x xs ->
      match x with
        Pair xa xb -> if xa == needle
          then True
          else contains xs needle-}