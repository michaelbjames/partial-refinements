data Map a b where
  Empty :: Map a b
  Cons :: k: a -> v: b -> xs: Map a b -> Map a b

termination measure len :: Map a b -> {Int | _v >= 0} where
  Empty -> 0
  Cons k v xs -> 1 + len xs

measure keys :: Map a b -> Set a where
  Empty -> []
  Cons k v xs -> [k] + keys xs

data Maybe a where
  Nothing :: Maybe a
  Just :: a -> Maybe a

measure isNothing :: Maybe a -> Bool where
  Nothing -> True
  Just x -> False


qualifier { len _v < len x, len _v >= 0, x == y }


find :: xs: Map Int Int -> x: Int -> {Maybe Int |
    ((x == 0 && xs == (Empty)) ==> (_v == Nothing)) &&
    ((x == 0 && xs == (Cons 0 4 Empty)) ==> (_v == Just 4)) &&
    ((x == 0 && xs == (Cons 1 5 (Cons 0 4 Empty))) ==> (_v == Just 4)) &&
    ((x == 0 && xs == (Cons 1 5 Empty)) ==> (_v == Nothing)) &&
    True
  }
find = ?? {- \haystack. \needle.
  match haystack with
    Empty -> Nothing
    Cons k v xs -> if k == needle
          then Just v
          else find xs needle -}