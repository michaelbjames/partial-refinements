{-
Are there and even number of Trues in a list of Bools?
-}

data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

not :: p:Bool -> {Bool | _v == !p}
true :: { Bool | _v }

qualifier { len _v < len x, len _v >= 0 }
qualifier { x }


-- {-
-- It will check WITHOUT the first, more general type.
-- -}
list_even_parity :: (xs:List Bool -> Bool) ^
  (xs: {List {Bool | _v == True}| len _v == 2 || len _v == 0} -> {Bool | _v == True}) ^
  (xs: {List {Bool | _v == True}| len _v == 3 || len _v == 1} -> {Bool | _v == False})
  -- (xs: {List {Bool | _v == False} | len _v > 0} -> {Bool | _v == False})
list_even_parity = ?? {- \xs.
  match xs with
    Nil -> True
    Cons y ys -> ?? {- if y
      then not (list_even_parity ys)
      else list_even_parity ys
      -}