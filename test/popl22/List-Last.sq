data Nat where
  Z :: Nat
  S :: Nat -> Nat

termination measure dec :: Nat -> {Int | _v >= 0} where
  Z -> 0
  S m -> 1 + dec m

data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

data Maybe a where
  Nothing :: Maybe a
  Just :: a -> Maybe a

measure isNothing :: Maybe a -> Bool where
  Nothing -> True
  Just x -> False

qualifier { len _v < len x, len _v >= 0 }

list_last ::
  (xs:List Int -> Maybe Int) ^
  (xs: {List Int | len _v == 0} -> {Maybe Int | isNothing _v}) ^
  (xs: {List Int | len _v > 0} -> {Maybe Int | !(isNothing _v)}) ^
  (xs:{List Int | _v == (Cons 1 Nil)} -> {Maybe Int | _v == Just 1}) ^
  (xs:{List Int | _v == (Cons 3 (Cons 1 Nil))} -> {Maybe Int | _v == Just 1}) -- ^
list_last = ?? {-\xs .
  match xs with
    Nil -> Nothing
    Cons x rest ->
      match rest with
        Nil -> Just x
        Cons y ys -> list_last rest-}
